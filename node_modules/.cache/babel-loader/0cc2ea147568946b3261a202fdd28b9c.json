{"ast":null,"code":"import _defineProperty from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/emrearas/Desktop/royal/src/Pages/Dashboard.js\";\nimport React from 'react';\nimport NavigationBar from '../Components/Dashboard/NavigationBar';\nimport PageContent from '../Components/Dashboard/PageContent';\nimport base from '../base';\nimport PropTypes from 'prop-types';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  function Dashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      menuItems: {},\n      order: {},\n      url: ''\n    };\n\n    _this.updateMenuItem = function (key, updatedMenuItem) {\n      console.log(key, updatedMenuItem); // take the copy of the current state\n\n      var menuItems = _objectSpread({}, _this.state.menuItems); // update that state\n\n\n      menuItems[key] = updatedMenuItem; // set the new menuItems object to the state\n\n      _this.setState({\n        menuItems: menuItems\n      });\n    };\n\n    _this.deleteMenuItem = function (key) {\n      // take the copy of state\n      var menuItems = _objectSpread({}, _this.state.menuItems); // update the state\n\n\n      menuItems[key] = null; // set the state\n\n      _this.setState({\n        menuItems: menuItems\n      });\n    };\n\n    _this.deleteOrder = function (key) {\n      // take the copy of state\n      var order = _objectSpread({}, _this.state.order); // update the state\n\n\n      delete order[key]; // set the state\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    _this.addMenuItem = function (menuItem) {\n      // take the copy of current state\n      var menuItems = _objectSpread({}, _this.state.menuItems); // get the new state\n\n\n      menuItems[\"menuItem\".concat(Date.now())] = menuItem; // set the new state\n\n      _this.setState({\n        menuItems: menuItems\n      });\n    };\n\n    _this.addToOrder = function (key) {\n      // take the copy of state\n      var order = _objectSpread({}, _this.state.order); // change or update the state\n\n\n      order[key] = order[key] + 1 || 1; // set the state\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    _this.uploadFile = function (e) {\n      var file = e.target.files[0];\n      var url = \"https://api.cloudinary.com/v1_1/djgv39mwv/upload\";\n      var xhr = new XMLHttpRequest();\n      var fd = new FormData();\n      xhr.open('POST', url, true);\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      var newPictureUrl = [];\n\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          // File uploaded successfully\n          // console.log(xhr.responseText);\n          var data = xhr.responseText;\n\n          for (url in data) {\n            if (data.hasOwnProperty(key)) {\n              var value = data[key];\n              console.log(value); //do something with value;\n            }\n          } // console.log(Object.values(data));\n          // console.log(Object.values(xhr.responseText))\n\n\n          var response = JSON.parse(xhr.responseText);\n          newPictureUrl.push(response.url);\n        }\n      };\n\n      fd.append('upload_preset', 'ombjh6fb');\n      fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n\n      fd.append('file', file);\n      console.log(fd);\n      xhr.send(fd);\n      return newPictureUrl;\n    };\n\n    _this.handlePicture = function (e, key) {\n      var picture = _this.uploadFile(e);\n\n      picture.map(function (item) {\n        return console.log(item);\n      });\n\n      var updatedMenuItem = _objectSpread({}, _this.state.menuItem, _defineProperty({}, 'image', picture));\n\n      _this.updateMenuItem(key, updatedMenuItem);\n    };\n\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var params = this.props.match.params;\n      var localStorageRef = localStorage.getItem(params);\n\n      if (localStorageRef) {\n        this.setState({\n          order: JSON.parse(localStorageRef)\n        });\n      }\n\n      this.ref = base.syncState(\"\".concat(params.storeId, \"/menuItems\"), {\n        context: this,\n        state: 'menuItems'\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      localStorage.setItem(this.props.match.params, JSON.stringify(this.state.order));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      base.removeBinding(this.ref);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"dashboard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navigation-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(NavigationBar, {\n        history: this.props.history,\n        addMenuItem: this.addMenuItem,\n        deleteMenuItem: this.deleteMenuItem,\n        updateMenuItem: this.updateMenuItem,\n        loadSampleMenuItem: this.loadSampleMenuItem,\n        menuItems: this.state.menuItems,\n        handlePicture: this.handlePicture,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"page-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(PageContent, {\n        history: this.props.history,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nDashboard.propTypes = {\n  match: PropTypes.object\n};\nexport { Dashboard as default };","map":{"version":3,"sources":["/Users/emrearas/Desktop/royal/src/Pages/Dashboard.js"],"names":["React","NavigationBar","PageContent","base","PropTypes","Dashboard","state","menuItems","order","url","updateMenuItem","key","updatedMenuItem","console","log","setState","deleteMenuItem","deleteOrder","addMenuItem","menuItem","Date","now","addToOrder","uploadFile","e","file","target","files","xhr","XMLHttpRequest","fd","FormData","open","setRequestHeader","newPictureUrl","onreadystatechange","readyState","status","data","responseText","hasOwnProperty","value","response","JSON","parse","push","append","send","handlePicture","picture","map","item","params","props","match","localStorageRef","localStorage","getItem","ref","syncState","storeId","context","setItem","stringify","removeBinding","history","loadSampleMenuItem","Component","propTypes","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport NavigationBar from '../Components/Dashboard/NavigationBar';\nimport PageContent from '../Components/Dashboard/PageContent';\nimport base from '../base';\nimport PropTypes from 'prop-types';\n\nexport default class Dashboard extends React.Component{\n    state = {\n        menuItems:{},\n        order:{},\n        url:''\n    }\n\n    static propTypes = {\n        match : PropTypes.object,\n    };\n\n    componentDidMount() {\n        const {params} = this.props.match;\n        const localStorageRef = localStorage.getItem(params);\n        if(localStorageRef){\n            this.setState({order:JSON.parse(localStorageRef)})\n        }\n        this.ref = base.syncState(`${params.storeId}/menuItems`,{\n            context:this,\n            state:'menuItems'\n        });\n    }\n\n    componentDidUpdate() {\n        localStorage.setItem(this.props.match.params, JSON.stringify(this.state.order));\n    }\n\n    componentWillUnmount() {\n        base.removeBinding(this.ref);\n    }\n\n    updateMenuItem = (key, updatedMenuItem) => {\n        console.log(key,updatedMenuItem);\n        // take the copy of the current state\n        const menuItems = {...this.state.menuItems};\n        // update that state\n        menuItems[key] = updatedMenuItem;\n        // set the new menuItems object to the state\n        this.setState({menuItems});\n\n    }\n\n    deleteMenuItem = (key) => {\n        // take the copy of state\n        const menuItems = {...this.state.menuItems};\n        // update the state\n        menuItems[key] = null;\n        // set the state\n        this.setState({menuItems});\n    }\n\n    deleteOrder = (key) => {\n        // take the copy of state\n        const order = {...this.state.order};\n        // update the state\n        delete order[key];\n        // set the state\n        this.setState({order});\n    }\n\n    addMenuItem = menuItem => {\n        // take the copy of current state\n        const menuItems = {...this.state.menuItems};\n        // get the new state\n        menuItems[`menuItem${Date.now()}`] = menuItem;\n        // set the new state\n        this.setState({\n            menuItems:menuItems,\n        })\n    }\n\n    addToOrder = key => {\n        // take the copy of state\n        const order = {...this.state.order};\n        // change or update the state\n        order[key] = order[key] + 1 || 1;\n        // set the state\n        this.setState({order:order});\n    }\n\n    // uploadPicture = (key) => {\n    //     // take the copy of the current state\n    //     const menuItems = {...this.state.menuItems};\n    //     let request = window.cloudinary.createUploadWidget(\n    //       { cloud_name: 'djgv39mwv', upload_preset: 'ombjh6fb', tags: ['xmas'] },\n    //       function(error, result) {\n    //         return result[0]['url'];\n    //       }\n    //     );\n    //     const url = request.open();\n    //     console.log('url',url);\n    //     console.log(request);\n    //     // if(url.length > 0){\n    //     //     request.close();\n    //     //     const updatedMenuItem = {\n    //     //         ...this.state.menuItem,\n    //     //         ['image'] : url[0]\n    //     //     };\n    //     //     this.updateMenuItem(key,updatedMenuItem);\n    //     // }\n    // }\n\n    // getPicture = () => {\n    //     const picture = this.uploadPicture;\n    //     console.log(picture);\n    // }\n\n    // *********** Upload file to Cloudinary ******************** //\nuploadFile = (e) => {\n    let file = e.target.files[0];\n    var url = `https://api.cloudinary.com/v1_1/djgv39mwv/upload`;\n    var xhr = new XMLHttpRequest();\n    var fd = new FormData();\n    xhr.open('POST', url, true);\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    const newPictureUrl = [];\n\n    xhr.onreadystatechange = function(e) {\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        // File uploaded successfully\n        // console.log(xhr.responseText);\n        const data = xhr.responseText;\n        for(url in data) {\n            if(data.hasOwnProperty(key)) {\n                var value = data[key];\n                console.log(value);\n                //do something with value;\n            }\n        }\n        // console.log(Object.values(data));\n        // console.log(Object.values(xhr.responseText))\n        let response = JSON.parse(xhr.responseText);\n        newPictureUrl.push(response.url);\n      }\n    };\n  \n    fd.append('upload_preset', 'ombjh6fb');\n    fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n    fd.append('file', file);\n    console.log(fd);\n    xhr.send(fd);\n    return newPictureUrl;\n  }\n\n  handlePicture = (e,key) => {\n      const picture = this.uploadFile(e);\n      picture.map(item=>console.log(item));\n\n      const updatedMenuItem = {\n        ...this.state.menuItem,\n        ['image'] : picture\n    };\n    this.updateMenuItem(key,updatedMenuItem);\n  }\n    render(){\n        return(\n            <div className=\"dashboard\">\n                <div className=\"navigation-bar\">\n                    <NavigationBar \n                        history={this.props.history}\n                        addMenuItem={this.addMenuItem}\n                        deleteMenuItem = {this.deleteMenuItem} \n                        updateMenuItem = {this.updateMenuItem}\n                        loadSampleMenuItem={this.loadSampleMenuItem}\n                        menuItems ={this.state.menuItems}\n                        handlePicture = {this.handlePicture}\n                    />\n                </div>\n                <div className=\"page-content\">\n                    <PageContent history={this.props.history}/>\n                </div>\n                {/* <button onClick={() => this.uploadPicture('key')}>add picture</button> */}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}