{"ast":null,"code":"import _objectSpread from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/emrearas/Desktop/royal/src/Pages/Dashboard.js\";\nimport React from 'react';\nimport NavigationBar from '../Components/Dashboard/NavigationBar';\nimport PageContent from '../Components/Dashboard/PageContent';\nimport base from '../base';\nimport PropTypes from 'prop-types';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  function Dashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      menuItems: {},\n      order: {},\n      url: ''\n    };\n\n    _this.updateMenuItem = function (key, updatedMenuItem) {\n      // take the copy of the current state\n      var menuItems = _objectSpread({}, _this.state.menuItems); // update that state\n\n\n      menuItems[key] = updatedMenuItem; // set the new menuItems object to the state\n\n      _this.setState({\n        menuItems: menuItems\n      });\n    };\n\n    _this.deleteMenuItem = function (key) {\n      // take the copy of state\n      var menuItems = _objectSpread({}, _this.state.menuItems); // update the state\n\n\n      menuItems[key] = null; // set the state\n\n      _this.setState({\n        menuItems: menuItems\n      });\n    };\n\n    _this.deleteOrder = function (key) {\n      // take the copy of state\n      var order = _objectSpread({}, _this.state.order); // update the state\n\n\n      delete order[key]; // set the state\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    _this.addMenuItem = function (menuItem) {\n      // take the copy of current state\n      var menuItems = _objectSpread({}, _this.state.menuItems); // get the new state\n\n\n      menuItems[\"menuItem\".concat(Date.now())] = menuItem; // set the new state\n\n      _this.setState({\n        menuItems: menuItems\n      });\n    };\n\n    _this.addToOrder = function (key) {\n      // take the copy of state\n      var order = _objectSpread({}, _this.state.order); // change or update the state\n\n\n      order[key] = order[key] + 1 || 1; // set the state\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    _this.uploadPicture = function (key) {\n      // take the copy of the current state\n      var menuItems = _objectSpread({}, _this.state.menuItems);\n\n      var request = window.cloudinary.createUploadWidget({\n        cloud_name: 'djgv39mwv',\n        upload_preset: 'ombjh6fb',\n        tags: ['xmas']\n      }, function (error, result) {\n        return result[0]['url'];\n      });\n      var url = request.open();\n      console.log('url', url);\n      console.log(request); // if(url.length > 0){\n      //     request.close();\n      //     const updatedMenuItem = {\n      //         ...this.state.menuItem,\n      //         ['image'] : url[0]\n      //     };\n      //     this.updateMenuItem(key,updatedMenuItem);\n      // }\n    };\n\n    _this.getPicture = function () {\n      var picture = _this.uploadPicture;\n      console.log(picture);\n    };\n\n    _this.uploadFile = function (file) {\n      var url = \"https://api.cloudinary.com/v1_1/djgv39mwv/upload\";\n      var xhr = new XMLHttpRequest();\n      var fd = new FormData();\n      xhr.open('POST', url, true);\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest'); // Reset the upload progress bar\n\n      document.getElementById('progress').style.width = 0; // Update progress (can be used to show progress indicator)\n\n      xhr.upload.addEventListener(\"progress\", function (e) {\n        var progress = Math.round(e.loaded * 100.0 / e.total);\n        document.getElementById('progress').style.width = progress + \"%\";\n        console.log(\"fileuploadprogress data.loaded: \".concat(e.loaded, \",\\n    data.total: \").concat(e.total));\n      });\n\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          // File uploaded successfully\n          var response = JSON.parse(xhr.responseText); // https://res.cloudinary.com/cloudName/image/upload/v1483481128/public_id.jpg\n\n          var url = response.secure_url; // Create a thumbnail of the uploaded image, with 150px width\n\n          var tokens = url.split('/');\n          tokens.splice(-2, 0, 'w_150,c_scale');\n          var img = new Image(); // HTML5 Constructor\n\n          img.src = tokens.join('/');\n          img.alt = response.public_id;\n          document.getElementById('gallery').appendChild(img);\n        }\n      };\n\n      fd.append('upload_preset', 'ombjh6fb');\n      fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n\n      fd.append('file', file);\n      xhr.send(fd);\n    };\n\n    _this.handleFiles = function (files) {\n      for (var i = 0; i < files.length; i++) {\n        _this.uploadFile(files[i]); // call the function to upload the file\n\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var params = this.props.match.params;\n      var localStorageRef = localStorage.getItem(params);\n\n      if (localStorageRef) {\n        this.setState({\n          order: JSON.parse(localStorageRef)\n        });\n      }\n\n      this.ref = base.syncState(\"\".concat(params.storeId, \"/menuItems\"), {\n        context: this,\n        state: 'menuItems'\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      localStorage.setItem(this.props.match.params, JSON.stringify(this.state.order));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      base.removeBinding(this.ref);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"dashboard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navigation-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(NavigationBar, {\n        history: this.props.history,\n        addMenuItem: this.addMenuItem,\n        deleteMenuItem: this.deleteMenuItem,\n        updateMenuItem: this.updateMenuItem,\n        loadSampleMenuItem: this.loadSampleMenuItem,\n        menuItems: this.state.menuItems,\n        uploadPicture: this.uploadPicture,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"page-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(PageContent, {\n        history: this.props.history,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.uploadPicture('key');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"add picture\"), React.createElement(\"div\", {\n        class: \"upload_button_holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        id: \"fileElem\",\n        multiple: true,\n        accept: \"image/*\",\n        style: {\n          display: 'none'\n        },\n        onchange: function onchange(files) {\n          return _this2.handleFiles(files);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }), React.createElement(\"a\", {\n        href: \"#\",\n        id: \"fileSelect\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Select some files\")));\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nDashboard.propTypes = {\n  match: PropTypes.object\n};\nexport { Dashboard as default };","map":{"version":3,"sources":["/Users/emrearas/Desktop/royal/src/Pages/Dashboard.js"],"names":["React","NavigationBar","PageContent","base","PropTypes","Dashboard","state","menuItems","order","url","updateMenuItem","key","updatedMenuItem","setState","deleteMenuItem","deleteOrder","addMenuItem","menuItem","Date","now","addToOrder","uploadPicture","request","window","cloudinary","createUploadWidget","cloud_name","upload_preset","tags","error","result","open","console","log","getPicture","picture","uploadFile","file","xhr","XMLHttpRequest","fd","FormData","setRequestHeader","document","getElementById","style","width","upload","addEventListener","e","progress","Math","round","loaded","total","onreadystatechange","readyState","status","response","JSON","parse","responseText","secure_url","tokens","split","splice","img","Image","src","join","alt","public_id","appendChild","append","send","handleFiles","files","i","length","params","props","match","localStorageRef","localStorage","getItem","ref","syncState","storeId","context","setItem","stringify","removeBinding","history","loadSampleMenuItem","display","Component","propTypes","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport NavigationBar from '../Components/Dashboard/NavigationBar';\nimport PageContent from '../Components/Dashboard/PageContent';\nimport base from '../base';\nimport PropTypes from 'prop-types';\n\nexport default class Dashboard extends React.Component{\n    state = {\n        menuItems:{},\n        order:{},\n        url:''\n    }\n\n    static propTypes = {\n        match : PropTypes.object,\n    };\n\n    componentDidMount() {\n        const {params} = this.props.match;\n        const localStorageRef = localStorage.getItem(params);\n        if(localStorageRef){\n            this.setState({order:JSON.parse(localStorageRef)})\n        }\n        this.ref = base.syncState(`${params.storeId}/menuItems`,{\n            context:this,\n            state:'menuItems'\n        });\n    }\n\n    componentDidUpdate() {\n        localStorage.setItem(this.props.match.params, JSON.stringify(this.state.order));\n    }\n\n    componentWillUnmount() {\n        base.removeBinding(this.ref);\n    }\n\n    updateMenuItem = (key, updatedMenuItem) => {\n        // take the copy of the current state\n        const menuItems = {...this.state.menuItems};\n        // update that state\n        menuItems[key] = updatedMenuItem;\n        // set the new menuItems object to the state\n        this.setState({menuItems});\n\n    }\n\n    deleteMenuItem = (key) => {\n        // take the copy of state\n        const menuItems = {...this.state.menuItems};\n        // update the state\n        menuItems[key] = null;\n        // set the state\n        this.setState({menuItems});\n    }\n\n    deleteOrder = (key) => {\n        // take the copy of state\n        const order = {...this.state.order};\n        // update the state\n        delete order[key];\n        // set the state\n        this.setState({order});\n    }\n\n    addMenuItem = menuItem => {\n        // take the copy of current state\n        const menuItems = {...this.state.menuItems};\n        // get the new state\n        menuItems[`menuItem${Date.now()}`] = menuItem;\n        // set the new state\n        this.setState({\n            menuItems:menuItems,\n        })\n    }\n\n    addToOrder = key => {\n        // take the copy of state\n        const order = {...this.state.order};\n        // change or update the state\n        order[key] = order[key] + 1 || 1;\n        // set the state\n        this.setState({order:order});\n    }\n\n    uploadPicture = (key) => {\n        // take the copy of the current state\n        const menuItems = {...this.state.menuItems};\n        let request = window.cloudinary.createUploadWidget(\n          { cloud_name: 'djgv39mwv', upload_preset: 'ombjh6fb', tags: ['xmas'] },\n          function(error, result) {\n            return result[0]['url'];\n          }\n        );\n        const url = request.open();\n        console.log('url',url);\n        console.log(request);\n        // if(url.length > 0){\n        //     request.close();\n        //     const updatedMenuItem = {\n        //         ...this.state.menuItem,\n        //         ['image'] : url[0]\n        //     };\n        //     this.updateMenuItem(key,updatedMenuItem);\n        // }\n    }\n\n    getPicture = () => {\n        const picture = this.uploadPicture;\n        console.log(picture);\n    }\n\n    // *********** Upload file to Cloudinary ******************** //\nuploadFile = (file) => {\n    var url = `https://api.cloudinary.com/v1_1/djgv39mwv/upload`;\n    var xhr = new XMLHttpRequest();\n    var fd = new FormData();\n    xhr.open('POST', url, true);\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n  \n    // Reset the upload progress bar\n     document.getElementById('progress').style.width = 0;\n    \n    // Update progress (can be used to show progress indicator)\n    xhr.upload.addEventListener(\"progress\", function(e) {\n      var progress = Math.round((e.loaded * 100.0) / e.total);\n      document.getElementById('progress').style.width = progress + \"%\";\n  \n      console.log(`fileuploadprogress data.loaded: ${e.loaded},\n    data.total: ${e.total}`);\n    });\n  \n    xhr.onreadystatechange = function(e) {\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        // File uploaded successfully\n        var response = JSON.parse(xhr.responseText);\n        // https://res.cloudinary.com/cloudName/image/upload/v1483481128/public_id.jpg\n        var url = response.secure_url;\n        // Create a thumbnail of the uploaded image, with 150px width\n        var tokens = url.split('/');\n        tokens.splice(-2, 0, 'w_150,c_scale');\n        var img = new Image(); // HTML5 Constructor\n        img.src = tokens.join('/');\n        img.alt = response.public_id;\n        document.getElementById('gallery').appendChild(img);\n      }\n    };\n  \n    fd.append('upload_preset', 'ombjh6fb');\n    fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n    fd.append('file', file);\n    xhr.send(fd);\n  }\n  \n  // *********** Handle selected files ******************** //\n  handleFiles = (files) => {\n    for (var i = 0; i < files.length; i++) {\n      this.uploadFile(files[i]); // call the function to upload the file\n    }\n  };\n\n    render(){\n        return(\n            <div className=\"dashboard\">\n                <div className=\"navigation-bar\">\n                    <NavigationBar \n                        history={this.props.history}\n                        addMenuItem={this.addMenuItem}\n                        deleteMenuItem = {this.deleteMenuItem} \n                        updateMenuItem = {this.updateMenuItem}\n                        loadSampleMenuItem={this.loadSampleMenuItem}\n                        menuItems ={this.state.menuItems}\n                        uploadPicture = {this.uploadPicture}\n                    />\n                </div>\n                <div className=\"page-content\">\n                    <PageContent history={this.props.history}/>\n                </div>\n                <button onClick={() => this.uploadPicture('key')}>add picture</button>\n                <div class=\"upload_button_holder\">\n                    <input type=\"file\" id=\"fileElem\" multiple accept=\"image/*\" style={{display:'none'}} onchange={(files) => this.handleFiles(files)}/>\n                    <a href=\"#\" id=\"fileSelect\">Select some files</a>\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}