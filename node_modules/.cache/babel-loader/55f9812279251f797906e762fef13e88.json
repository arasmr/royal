{"ast":null,"code":"import _objectSpread from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/emrearas/Desktop/royal/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/emrearas/Desktop/royal/src/Components/Dashboard.js\";\nimport React from 'react';\nimport NavigationBar from './NavigationBar';\nimport PageContent from './PageContent';\nimport base from '../base';\nimport PropTypes from 'prop-types';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  function Dashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      menuItems: {},\n      order: {}\n    };\n\n    _this.updateMenuItem = function (key, updatedMenuItem) {\n      // take the copy of the current state\n      var menuItems = _objectSpread({}, _this.state.menuItems); // update that state\n\n\n      menuItems[key] = updatedFish; // set the new menuItems object to the state\n\n      _this.setState({\n        menuItems: menuItems\n      });\n    };\n\n    _this.deleteMenuItem = function (key) {\n      // take the copy of state\n      var menuItems = _objectSpread({}, _this.state.menuItems); // update the state\n\n\n      menuItems[key] = null; // set the state\n\n      _this.setState({\n        menuItems: menuItems\n      });\n    };\n\n    _this.deleteOrder = function (key) {\n      // take the copy of state\n      var order = _objectSpread({}, _this.state.order); // update the state\n\n\n      delete order[key]; // set the state\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    _this.addMenuItem = function (menuItem) {\n      // take the copy of current state\n      var menuItems = _objectSpread({}, _this.state.menuItems); // get the new state\n\n\n      menuItems[\"menuItem\".concat(Date.now())] = menuItem; // set the new state\n\n      _this.setState({\n        menuItems: menuItems\n      });\n    };\n\n    _this.addToOrder = function (key) {\n      // take the copy of state\n      var order = _objectSpread({}, _this.state.order); // change or update the state\n\n\n      order[key] = order[key] + 1 || 1; // set the state\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var params = this.props.match.params;\n      var localStorageRef = localStorage.getItem(params);\n\n      if (localStorageRef) {\n        this.setState({\n          order: JSON.parse(localStorageRef)\n        });\n      }\n\n      this.ref = base.syncState(\"\".concat(params.storeId, \"/menuItems\"), {\n        context: this,\n        state: 'menuItems'\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      localStorage.setItem(this.props.match.params, JSON.stringify(this.state.order));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      base.removeBinding(this.ref);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"dashboard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navigation-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(NavigationBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"page-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(PageContent, {\n        addToOrder: this.addToOrder,\n        menuItems: this.state.menuItems,\n        deleteOrder: this.deleteOrder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nDashboard.propTypes = {\n  match: PropTypes.object\n};\nexport { Dashboard as default };","map":{"version":3,"sources":["/Users/emrearas/Desktop/royal/src/Components/Dashboard.js"],"names":["React","NavigationBar","PageContent","base","PropTypes","Dashboard","state","menuItems","order","updateMenuItem","key","updatedMenuItem","updatedFish","setState","deleteMenuItem","deleteOrder","addMenuItem","menuItem","Date","now","addToOrder","params","props","match","localStorageRef","localStorage","getItem","JSON","parse","ref","syncState","storeId","context","setItem","stringify","removeBinding","Component","propTypes","object"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;IAEqBC,S;;;;;;;;;;;;;;;;;UACjBC,K,GAAQ;AACJC,MAAAA,SAAS,EAAC,EADN;AAEJC,MAAAA,KAAK,EAAC;AAFF,K;;UA6BRC,c,GAAiB,UAACC,GAAD,EAAMC,eAAN,EAA0B;AACvC;AACA,UAAMJ,SAAS,qBAAO,MAAKD,KAAL,CAAWC,SAAlB,CAAf,CAFuC,CAGvC;;;AACAA,MAAAA,SAAS,CAACG,GAAD,CAAT,GAAiBE,WAAjB,CAJuC,CAKvC;;AACA,YAAKC,QAAL,CAAc;AAACN,QAAAA,SAAS,EAATA;AAAD,OAAd;AAEH,K;;UAEDO,c,GAAiB,UAACJ,GAAD,EAAS;AACtB;AACA,UAAMH,SAAS,qBAAO,MAAKD,KAAL,CAAWC,SAAlB,CAAf,CAFsB,CAGtB;;;AACAA,MAAAA,SAAS,CAACG,GAAD,CAAT,GAAiB,IAAjB,CAJsB,CAKtB;;AACA,YAAKG,QAAL,CAAc;AAACN,QAAAA,SAAS,EAATA;AAAD,OAAd;AACH,K;;UAEDQ,W,GAAc,UAACL,GAAD,EAAS;AACnB;AACA,UAAMF,KAAK,qBAAO,MAAKF,KAAL,CAAWE,KAAlB,CAAX,CAFmB,CAGnB;;;AACA,aAAOA,KAAK,CAACE,GAAD,CAAZ,CAJmB,CAKnB;;AACA,YAAKG,QAAL,CAAc;AAACL,QAAAA,KAAK,EAALA;AAAD,OAAd;AACH,K;;UAEDQ,W,GAAc,UAAAC,QAAQ,EAAI;AACtB;AACA,UAAMV,SAAS,qBAAO,MAAKD,KAAL,CAAWC,SAAlB,CAAf,CAFsB,CAGtB;;;AACAA,MAAAA,SAAS,mBAAYW,IAAI,CAACC,GAAL,EAAZ,EAAT,GAAqCF,QAArC,CAJsB,CAKtB;;AACA,YAAKJ,QAAL,CAAc;AACVN,QAAAA,SAAS,EAACA;AADA,OAAd;AAGH,K;;UAEDa,U,GAAa,UAAAV,GAAG,EAAI;AAChB;AACA,UAAMF,KAAK,qBAAO,MAAKF,KAAL,CAAWE,KAAlB,CAAX,CAFgB,CAGhB;;;AACAA,MAAAA,KAAK,CAACE,GAAD,CAAL,GAAaF,KAAK,CAACE,GAAD,CAAL,GAAa,CAAb,IAAkB,CAA/B,CAJgB,CAKhB;;AACA,YAAKG,QAAL,CAAc;AAACL,QAAAA,KAAK,EAACA;AAAP,OAAd;AACH,K;;;;;;;wCAlEmB;AAAA,UACTa,MADS,GACC,KAAKC,KAAL,CAAWC,KADZ,CACTF,MADS;AAEhB,UAAMG,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqBL,MAArB,CAAxB;;AACA,UAAGG,eAAH,EAAmB;AACf,aAAKX,QAAL,CAAc;AAACL,UAAAA,KAAK,EAACmB,IAAI,CAACC,KAAL,CAAWJ,eAAX;AAAP,SAAd;AACH;;AACD,WAAKK,GAAL,GAAW1B,IAAI,CAAC2B,SAAL,WAAkBT,MAAM,CAACU,OAAzB,iBAA6C;AACpDC,QAAAA,OAAO,EAAC,IAD4C;AAEpD1B,QAAAA,KAAK,EAAC;AAF8C,OAA7C,CAAX;AAIH;;;yCAEoB;AACjBmB,MAAAA,YAAY,CAACQ,OAAb,CAAqB,KAAKX,KAAL,CAAWC,KAAX,CAAiBF,MAAtC,EAA8CM,IAAI,CAACO,SAAL,CAAe,KAAK5B,KAAL,CAAWE,KAA1B,CAA9C;AACH;;;2CAEsB;AACnBL,MAAAA,IAAI,CAACgC,aAAL,CAAmB,KAAKN,GAAxB;AACH;;;6BAkDO;AACJ,aACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAII;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,WAAD;AACI,QAAA,UAAU,EAAE,KAAKT,UADrB;AAEI,QAAA,SAAS,EAAE,KAAKd,KAAL,CAAWC,SAF1B;AAGI,QAAA,WAAW,EAAE,KAAKQ,WAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAJJ,CADJ;AAcH;;;;EA7FkCf,KAAK,CAACoC,S;;AAAxB/B,S,CAMVgC,S,GAAY;AACfd,EAAAA,KAAK,EAAGnB,SAAS,CAACkC;AADH,C;SANFjC,S","sourcesContent":["import React from 'react';\nimport NavigationBar from './NavigationBar';\nimport PageContent from './PageContent';\nimport base from '../base';\nimport PropTypes from 'prop-types';\n\nexport default class Dashboard extends React.Component{\n    state = {\n        menuItems:{},\n        order:{}\n    }\n\n    static propTypes = {\n        match : PropTypes.object,\n    };\n\n    componentDidMount() {\n        const {params} = this.props.match;\n        const localStorageRef = localStorage.getItem(params);\n        if(localStorageRef){\n            this.setState({order:JSON.parse(localStorageRef)})\n        }\n        this.ref = base.syncState(`${params.storeId}/menuItems`,{\n            context:this,\n            state:'menuItems'\n        });\n    }\n\n    componentDidUpdate() {\n        localStorage.setItem(this.props.match.params, JSON.stringify(this.state.order));\n    }\n\n    componentWillUnmount() {\n        base.removeBinding(this.ref);\n    }\n\n    updateMenuItem = (key, updatedMenuItem) => {\n        // take the copy of the current state\n        const menuItems = {...this.state.menuItems};\n        // update that state\n        menuItems[key] = updatedFish;\n        // set the new menuItems object to the state\n        this.setState({menuItems});\n\n    }\n\n    deleteMenuItem = (key) => {\n        // take the copy of state\n        const menuItems = {...this.state.menuItems};\n        // update the state\n        menuItems[key] = null;\n        // set the state\n        this.setState({menuItems});\n    }\n\n    deleteOrder = (key) => {\n        // take the copy of state\n        const order = {...this.state.order};\n        // update the state\n        delete order[key];\n        // set the state\n        this.setState({order});\n    }\n\n    addMenuItem = menuItem => {\n        // take the copy of current state\n        const menuItems = {...this.state.menuItems};\n        // get the new state\n        menuItems[`menuItem${Date.now()}`] = menuItem;\n        // set the new state\n        this.setState({\n            menuItems:menuItems,\n        })\n    }\n\n    addToOrder = key => {\n        // take the copy of state\n        const order = {...this.state.order};\n        // change or update the state\n        order[key] = order[key] + 1 || 1;\n        // set the state\n        this.setState({order:order});\n    }\n\n    render(){\n        return(\n            <div className=\"dashboard\">\n                <div className=\"navigation-bar\">\n                    <NavigationBar/>\n                </div>\n                <div className=\"page-content\">\n                    <PageContent\n                        addToOrder={this.addToOrder}\n                        menuItems={this.state.menuItems}\n                        deleteOrder={this.deleteOrder}\n                    />\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}